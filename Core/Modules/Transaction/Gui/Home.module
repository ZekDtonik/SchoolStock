<?php
/**
 * Created by MarxMedia Solutions.
 *         Author: Nelson Anjos
 *    Date: 03/2019
 *
 */
 namespace Modules\Transaction;

 use Interfaces\ThrowableAll;
 use Modules\CNN;
 use Modules\Pagination;
 use Modules\System;
 use Modules\Template\Template;
 use Modules\Upshot;

 class Home
 {
   private $sql;
   private $moduleName;

   private function getModuleName() { return $this->moduleName; }
   public function setModuleName($moduleName) { $this->moduleName = $moduleName; }
   public function getSql() { return $this->sql; }

   public function __construct($ModuleName) {
       try {
           $this->sql = CNN::getSql();
           $this->setModuleName($ModuleName);
           $JsonParser = [];
           $DataParser = [];
           $DataParser['transaction_input'] = WWW_PATH.$ModuleName."/transaction_input/";
           $DataParser['transaction_output'] = WWW_PATH.$ModuleName."/transaction_output/";
           //$DataParser['link_transaction'] = WWW_PATH . $ModuleName . "/new/";
           //$DataParser['link_outline'] = WWW_PATH . $ModuleName . "/outline/";
           //$DataParser['link_get'] = WWW_PATH . $ModuleName . "/get/";
           $DataParser['data_table'] = '';
           //
           $DataParser['composition'] = $this->fetchContent("SELECT * FROM see_transactions ORDER BY auhtid DESC");
           //Template principal da página
           $Template = new Template(APP_ROOT . DS . "Core/Modules/Transaction/Gui/Views/homeTransaction.tpl", $DataParser, true);
           echo $Template->showTemplate();
       } catch (ThrowableAll $exception) {
           Upshot::showData("Excessão", null, $exception->getMessage(), '', null, true);
       }
   }

   private function fetchContent($querytoFetch) {
       $getUserGroups = $this->getSql()->query($querytoFetch);
       if ($getUserGroups->rowCount() > 0) {
           //Paginação de Conteúdo
           $pagination = new Pagination();
           $pagination->setPage(_level1);
           $pagination->setLimit(1000000000);
           $pagination->setContent($getUserGroups->fetchAll(\PDO::FETCH_ASSOC));
           $pagination->setLink(WWW_PATH . $this->getModuleName());
           //Variavel de cabeçalho de tabela
           $tableHeadData = [];
           $tableHeadData['data_table'] = '';
           //Recupera o template de TR para inserção na tabela
           foreach ($pagination->getContent() as $tableLine) {
               $preLink = WWW_PATH . $this->getModuleName() . DS;
               //Data Parser de tratamento
               $lineTable = [];
               $auhtid = $tableLine['auhtid'];
               $lineTable['protocol'] = $tableLine['protocol'];
               $lineTable['prdid'] = $tableLine['prdid'];
               $lineTable['productName'] = $tableLine['productName'];
               $lineTable['quantity'] = $tableLine['quantity'];
               $lineTable['dateOperation'] = date('d/m/Y',strtotime($tableLine['dateOperation']));
               if($tableLine['typeAction'] == 1){
                 $lineTable['typeAction'] = "Entrada";
               } else {
                 $lineTable['typeAction'] = "Saida";
               }
               $dataPrompt = [];
               $dataPrompt['url'] = _system . DS . $this->getModuleName() . DS . 'get' . DS . $auhtid . DS . System::getAccessToken();

               $lineTable['data_prompt'] = base64_encode(json_encode($dataPrompt));
               $tempTr = new Template(APP_ROOT . DS . MODULES_PATH . DS . $this->getModuleName() . DS . "Gui/Views/Controller/tableListTransaction.tpl", $lineTable, true);
               $tableHeadData['data_table'] .= $tempTr->showTemplate();

           }
           $tableHeadData['pagination'] = $pagination->getInterface(['controlArrow'=>true]);
           //Template de cabeçalho e estrutura de tabela
           $TableHeader = new Template(APP_ROOT . DS . MODULES_PATH . DS . $this->getModuleName() . DS . "Gui/Views/Controller/tableTransaction.tpl", $tableHeadData, true);
           //Composição de Template principal da página
           return $TableHeader->showTemplate();
       } else {
           $tableMessage = [];
           $tableMessage['title'] = _tr('no_transaction_registered');
           $tableMessage['msg'] = _tr('none_one_transaction_are_defined');
           $tableMessage['icon'] = 'ais-info';
           $TableNothing = new Template(APP_ROOT . DS . MODULES_PATH . DS . $this->getModuleName() . DS . "Gui/Views/Controller/tableNoContent.tpl", $tableMessage, true);
           return $TableNothing->showTemplate();
       }
   }


 }
