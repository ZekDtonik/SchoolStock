<?php

namespace Modules\Application;

use Abstracts\Component;
use Exceptions\EngineException;
use Interfaces\{
    ActiveSidebar, ModuleInteractions
};
use Modules\{
    Application\Products\GraphicInterface\Create,
    Application\Products\GraphicInterface\Home,
    Application\Products\GraphicInterface\Modify,
    Application\Products\Manager\Add,
    Application\Products\Manager\Chg,
    Application\Products\Manager\Del,
    Application\Products\Manager\GetData,
    CNN,
    Kernel\ModuleMenu,
    Template\Template,
    Upshot
};

class Products extends Component implements ActiveSidebar,ModuleInteractions {

	public function __construct()
    {
        parent::__construct();
        $this->loader();//Autoload padrão carregado pelo Component
        //$this->loader('atl'); Use com o parametro para autoload personalizado
        //!defined("__CREDENTIALS") ? define("__CREDENTIALS",'credentials') : null;
    }


    public function init(...$gets) {
        try{

            /**
             * @decription Instancia de Permissoes
             * @doc - Usado para checar o nível de acesso do usuário em questão
             */
            //$instancePermission = new Permissions();

            /**
             * @description - Switch de acesso de área do módulo
             * @param $gets [] - GETS do navegador que define o padrão de acesso
             */
            switch (strtolower($gets[0][1])){
                case 'new':
                    $this->setTitle("Novo produto");
                    $this->applyRestriction('add');
                    new Create(Products::getName());

                    break;
                case 'edit':

                    $this->setTitle("Edição de produto");
                    $this->applyRestriction('edit');
                    $editCategory = new Modify(Products::getName(),$gets[0][2]);
                    $editCategory->init();
                    break;
                /**
                 * @case PAGINA PRINCIPAL DO MODULO
                 */
                default:
                    $this->setTitle('Gerência de Produtos');
                    $this->applyRestriction('view');
                    new Home(Products::getName());

                    break;
            }
            //$this->setModuleMenu($this->getMenuInteractive());
        }
        catch (EngineException $exception){
            Upshot::noData(_tr('internal_error'),$exception->getMessage(),'wrong',null);
        }

    }



    public function requests(...$dataRequest) {
        //var_dump($dataRequest);
        /**
         * @switch Este suite recupera o nome da ação do módulo que esta fazendo a
         * requisição.
         * @internal-doc O nome da ação esta no primeiro $_GET depois do
         * nome do módulo.
         */

        switch ($dataRequest[0]){
            /**
             * --------------------------------------------------
             * ***          RECUPERA DADOS DE GRUPO           ***
             * --------------------------------------------------
             */
            case 'get':
                $this->applyRestriction('view',true);
                $get = new GetData(Products::getName());
                $get->getData($dataRequest[1],$dataRequest[2]);
                break;
            /**
             * --------------------------------------------------
             * ***          NOVA CREDENCIAL DE USUÁRIO        ***
             * --------------------------------------------------
             */
            case 'new':
                $this->applyRestriction('add',true);
                $add = new Add();
                $add->setAccessToken(_level3);
                $add->init();
                break;
            /**
             * --------------------------------------------------
             * ***          EDITAR CREDENCIAL DE USUÁRIO      ***
             * --------------------------------------------------
             */
            case 'edit':
                $this->applyRestriction('edit',true);
                $edit = new Chg();
                $edit->setPrdidToEdit(_level3);
                $edit->setAccessToken(_level4);
                $edit->init();
                break;
            /**
             * --------------------------------------------------
             * ***          REMOVER CATEGORIA                ***
             * --------------------------------------------------
             */
            case 'remove':
                $this->applyRestriction('del',true);
                $remove = new Del();
                $remove->setPrdidToRemove(_level3);
                $remove->setAccessToken(_level4);
                $remove->setModuleName(Category::getName());
                $remove->remove();
                break;

            default:
                echo _tr('bad_request');
            /**
             * --------------------------------------------------
             * ***               FIM BIBLIOTECA               ***
             * --------------------------------------------------
             */
        }
    }

    static function getIcon() {
        return "credentialsIcon";
    }
    static function getDescription() {
        return _tr('system_locale/Produtos');
    }
    static function getName() {
        $classSR = explode('\\',get_called_class());
        return end($classSR);
        //return 'UserGroup';

    }

    public function getMenuInteractive() {
        $menu = new ModuleMenu(_page);
        $menu->createButton('dashboard','dashboard','link/example/pg1','pg1');
        $menu->createButton('add_item','newBook','link/example/pg2','pg2');
        $menu->createButton('bookcase','viewBook','link/example/pg3','pg3');
        $menu->createButton('circulations','circule_book','link/example/pg4','pg4');
        return $menu->show(true);
    }

    static function widgets($widgetName) {
        $sql = CNN::getSql();
        if (empty($widgetName)){
            return false;
        }
        else{
            switch ($widgetName){
                case 'totalCredentials':
                    //------------------------------
                    //Widget Total de Grupos de Usuários
                    $queryUserGroup = $sql->query("SELECT count(cid) as `total` FROM see_credentials");
                    $parserUserGroup =[];
                    $getResultUserGroup = $queryUserGroup->fetch(\PDO::FETCH_ASSOC);
                    $parserUserGroup['title'] = _tr('credentials');
                    $parserUserGroup['icon'] = "ais-credential";
                    $parserUserGroup['sub_title'] = _tr('total_of_credentials_registered');
                    $parserUserGroup['content'] = "<h1 class='txt-center'>".$getResultUserGroup['total']."</h1>";
                    $templateWUS = new Template(APP_ROOT.DS.MODULES_PATH.DS. self::getName().DS."Gui/Views/Controller/widget.tpl",$parserUserGroup,true);
                    //------------------------------
                    return $templateWUS->showTemplate();
                    break;

            }
        }
    }
}

?>